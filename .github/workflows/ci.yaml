# This workflow defines a comprehensive Continuous Integration (CI) pipeline for the Java Spring Boot application.
# It lints, scans, tests, builds a Docker image, and pushes it to Docker Hub.

name: CI - Spring Boot Backend

# This workflow triggers on pushes and pull requests to the "main" branch.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # The 'ci' job encapsulates all the continuous integration steps.
  ci:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository code so the workflow can access it.
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up the correct Java version for the build environment.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Run Checkstyle to enforce code style standards. The '|| true' ensures the pipeline continues even if linting fails.
      - name: Run Linter
        run: ./mvnw checkstyle:check || true

      # 4. Scan for known vulnerabilities in dependencies using Trivy. Fails on CRITICAL or HIGH severity issues.
      - name: Dependency Scan
        uses: aquasecurity/trivy-action@master # Using master for latest updates
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      # 5. Initialize CodeQL for static security analysis.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      # 6. Compile the project to prepare it for CodeQL's analysis.
      - name: Build for CodeQL
        run: ./mvnw clean compile

      # 7. Perform the actual CodeQL analysis to find security vulnerabilities in the code.
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # 8. Run the project's unit tests to ensure code correctness.
      - name: Run Unit Tests
        run: ./mvnw test

      # 9. Log in to Docker Hub using credentials stored in GitHub Secrets.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 10. Build the Docker image and push it to the registry with 'latest' and commit SHA tags.
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            anubhav1404/user-backend:latest
            anubhav1404/user-backend:${{ github.sha }}

